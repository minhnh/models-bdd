# SPDX-License-Identifier:  MPL-2.0
PREFIX bdd: <https://secorolab.github.io/metamodels/acceptance-criteria/bdd#>
PREFIX time: <https://secorolab.github.io/metamodels/time#>
PREFIX agn: <https://secorolab.github.io/metamodels/agent#>
PREFIX env: <https://secorolab.github.io/metamodels/environment#>
PREFIX bhv: <https://secorolab.github.io/metamodels/behaviour#>

CONSTRUCT {
    ?us bdd:has-criteria ?scenarioVar .
    ?scenarioVar
        bhv:of-behaviour ?behaviour ;
        bdd:of-template ?scenarioTmpl ;
        bdd:of-scenario ?scenario ;
        bdd:has-scene ?scene ;
        bdd:has-variation ?taskVariation .
    ?scene a ?sceneElemType ;
        env:has-object ?sceneObj ;
        env:has-workspace ?sceneWs ;
        agn:has-agent ?sceneAgent .
    ?taskVariation a ?varType .
    ?scenario
        bdd:ref-object ?taskObject ;
        bdd:ref-workspace ?taskWorkspace ;
        bdd:ref-agent ?taskAgent ;
        bdd:given ?givenClause ;
        bdd:when ?when ;
        bdd:then ?thenClause .
    ?clause
        bdd:ref-object ?taskObject ;
        bdd:ref-workspace ?taskWorkspace ;
        bdd:ref-agent ?taskAgent ;
        bdd:holds ?fluent ;
        bdd:holds-at ?timeConstraint  .
    ?fluent a ?fluentType .
    ?timeConstraint a ?tcType ;
        time:ref-event ?tcEvent .
}
WHERE {
    ?us a bdd:UserStory ;
        bdd:has-criteria ?scenarioVar .

    ?scenarioVar a bdd:ScenarioVariant ;
        bdd:of-template ?scenarioTmpl ;
        bdd:has-scene ?sceneElem ;
        bdd:has-variation ?taskVariation .

    ?scenarioTmpl a bdd:ScenarioTemplate ;
        bdd:of-scenario ?scenario ;
        bdd:has-scene ?scene .

    ?sceneElem a ?sceneElemType ;
        bdd:of-scene ?scene .
    {
        {
            ?sceneElem a bdd:SceneHasObjects ;
                env:has-object ?sceneObj .
        }
        UNION
        {
            ?sceneElem a bdd:SceneHasWorkspaces ;
                env:has-workspace ?sceneWs .
        }
        UNION
        {
            ?sceneElem a bdd:SceneHasAgents ;
                agn:has-agent ?sceneAgent .
        }
    }

    ?taskVariation a bdd:TaskVariation ;
        a ?varType .

    {
        { ?scenarioVar bdd:has-clause ?clause . }
        UNION
        { ?scenarioTmpl bdd:has-clause ?clause . }
    }

    ?clause a bdd:FluentClause ;
        bdd:holds ?fluent ;
        bdd:holds-at ?timeConstraint .
    {
        { ?clause bdd:ref-object ?taskObject }
        UNION
        { ?clause bdd:ref-workspace ?taskWorkspace }
        UNION
        { ?clause bdd:ref-agent ?taskAgent }
    }

    ?fluent a ?fluentType .

    ?timeConstraint a time:TimeConstraint ;
        a ?tcType .
    OPTIONAL {
        ?timeConstraint time:ref-event ?tcEvent
    }

    ?scenario a bdd:Scenario ;
        bhv:of-behaviour ?behaviour ;
        bdd:given ?given ;
        bdd:when ?when ;
        bdd:then ?then .

    ?given ^ bdd:clause-of ?givenClause .
    {
        { ?givenClause ^ bdd:has-clause ?scenarioTmpl . }
        UNION
        { ?givenClause ^ bdd:has-clause ?scenarioVar . }
    }

    ?then ^ bdd:clause-of ?thenClause .
    {
        { ?thenClause ^ bdd:has-clause ?scenarioTmpl . }
        UNION
        { ?thenClause ^ bdd:has-clause ?scenarioVar . }
    }
}
